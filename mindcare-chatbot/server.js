const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const { GoogleGenerativeAI } = require('@google/generative-ai');
require('dotenv').config();

const app = express();
const port = process.env.PORT || 3000;

// Initialize Gemini AI
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

// Middleware
app.use(helmet({
  contentSecurityPolicy: false // Disable for development
}));
app.use(cors());
app.use(express.json());

// Serve static files from public directory
app.use(express.static('public'));

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100
});
app.use(limiter);

// System prompt for the AI - Updated for Indian languages only
const SYSTEM_PROMPT = `
You are a multilingual AI mental health support chatbot designed specifically for Indian students. 
Your responsibilities:
1. Detect the user's mood (depressed, stressed, anxious, homesick, financial stress, relationship issues, academic pressure, happy/normal).
2. Respond with empathy and kindness. Never be judgmental or dismissive.
3. Provide practical support:
   - If depressed/stressed тЖТ suggest coping activities, encourage journaling, suggest counseling, and provide self-help resources.
   - If normal/happy тЖТ suggest wellness activities, community interaction, or focus tools.
4. Always respond in the same language the user used. You support ALL Indian languages including:
   - Hindi (рд╣рд┐рдВрджреА)
   - English (Indian context)
   - Bengali (ржмрж╛ржВрж▓рж╛)
   - Telugu (р░др▒Жр░▓р▒Бр░Чр▒Б)
   - Marathi (рдорд░рд╛рдареА)
   - Tamil (родрооро┐ро┤рпН)
   - Gujarati (ркЧрлБркЬрк░рк╛ркдрлА)
   - Kannada (р▓Хр▓ир│Нр▓ир▓б)
   - Malayalam (р┤ор┤▓р┤пр┤╛р┤│р┤В)
   - Odia (рмУрмбрм╝рм┐рмЖ)
   - Punjabi (рикрй░риЬри╛римрйА)
   - Assamese (ржЕрж╕ржорзАржпрж╝рж╛)
   - Urdu (╪з╪▒╪п┘И)
   - Maithili (рдореИрдерд┐рд▓реА)
   - Santali (рд╕рдВрддрд╛рд▓реА)
   - Kashmiri (рдХреЙрд╢реБрд░ / ┌й┘▓╪┤┘П╪▒)
   - Nepali (рдиреЗрдкрд╛рд▓реА)
   - Sindhi (╪│┘Ж┌М┘К)
   - Dogri (рдбреЛрдЧрд░реА)
   - Manipuri (ъпГъпдъпЗъпй ъпВъпгъпЯ)
   - Bodo (рдмрдбрд╝реЛ)
   - Konkani (рдХреЛрдВрдХрдгреА)
5. Keep responses short, warm, and human-like. Add emojis occasionally to reduce heaviness.
6. For emergencies (like suicide/self-harm risk) тЖТ show empathy, recommend contacting local Indian support services immediately (like iCall, AASRA), and encourage reaching out to a trusted person.
7. Maintain privacy and confidentiality.
8. Be culturally sensitive to Indian contexts, family dynamics, and educational pressures.

You are NOT a doctor. You are a supportive companion guiding Indian students towards resources and well-being.

IMPORTANT: Always respond in valid JSON format:
{
  "response": "Your empathetic response here",
  "mood": "detected_mood",
  "emergency": false,
  "language": "detected_language"
}
`;

// Main chat endpoint
app.post('/api/chat', async (req, res) => {
  try {
    const { message, conversationHistory = [] } = req.body;

    if (!message) {
      return res.status(400).json({ 
        response: 'рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдорди рдХреА рдмрд╛рдд рд╕рд╛рдЭрд╛ рдХрд░реЗрдВред рдореИрдВ рдпрд╣рд╛рдБ рд╕реБрдирдиреЗ рдХреЗ рд▓рд┐рдП рд╣реВрдБред ЁЯТЩ / Please share what\'s on your mind. I\'m here to listen. ЁЯТЩ',
        mood: 'normal',
        emergency: false,
        language: 'hi'
      });
    }

    // Check if API key is configured
    console.log('GEMINI_API_KEY:', process.env.GEMINI_API_KEY ? 'SET' : 'NOT SET');
    if (!process.env.GEMINI_API_KEY) {
      return res.status(500).json({
        response: 'AI рд╕реЗрд╡рд╛ рд╕рд╣реА рддрд░реАрдХреЗ рд╕реЗ рдХреЙрдиреНрдлрд╝рд┐рдЧрд░ рдирд╣реАрдВ рд╣реИред рдХреГрдкрдпрд╛ API key рдЬрд╛рдБрдЪреЗрдВред ЁЯТЩ / AI service is not properly configured. Please check your API key. ЁЯТЩ',
        mood: 'normal',
        emergency: false,
        language: 'hi'
      });
    }

    // Initialize the model
    const model = genAI.getGenerativeModel({ model: 'gemini-2.0-flash-exp' });

    // Create the prompt with conversation history
    let conversationContext = '';
    if (conversationHistory.length > 0) {
      conversationContext = '\n\nRecent conversation context:\n' + 
        conversationHistory.map(entry => 
          `User (${entry.language || 'unknown'}, mood: ${entry.mood || 'unknown'}): ${entry.user}\nAssistant: ${entry.assistant}`
        ).join('\n');
    }

    const prompt = `${SYSTEM_PROMPT}${conversationContext}\n\nUser message: "${message}"\n\nRespond in JSON format:`;

    console.log('Processing message:', message);

    // Generate response
    const result = await model.generateContent(prompt);
    let responseText = result.response.text();

    // Clean the response to ensure it's valid JSON
    responseText = responseText.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();

    console.log('Raw AI response:', responseText);

    // Try to parse JSON response
    let parsedResponse;
    try {
      parsedResponse = JSON.parse(responseText);
    } catch (parseError) {
      console.error('JSON Parse Error:', parseError);
      console.log('Failed to parse:', responseText);
      
      // Enhanced fallback response with Indian language detection
      const lowerMessage = message.toLowerCase();
      let mood = 'normal';
      let emergencyAlert = false;
      let detectedLanguage = 'hi'; // Default to Hindi
      
      // Simple language detection
      if (/[рдЕ-рд╣]/.test(message) && message.includes('рдЖрд╣реЗ')) detectedLanguage = 'mr';
      else if (/[рдЕ-рд╣]/.test(message)) detectedLanguage = 'hi';
      else if (/[ржЕ-рж╣]/.test(message)) detectedLanguage = 'bn';
      else if (/[р░Е-р░╣]/.test(message)) detectedLanguage = 'te';
      else if (/[роЕ-ро╣]/.test(message)) detectedLanguage = 'ta';
      else if (/[╪з-█М]/.test(message)) detectedLanguage = 'ur';
      else if (/[ркЕ-рк╣]/.test(message)) detectedLanguage = 'gu';
      else if (/[р▓Е-р▓╣]/.test(message)) detectedLanguage = 'kn';
      else if (/[р┤Е-р┤╣]/.test(message)) detectedLanguage = 'ml';
      else if (/[рмЕ-рм╣]/.test(message)) detectedLanguage = 'or';
      else if (/[риЕ-ри╣]/.test(message)) detectedLanguage = 'pa';
      else if (/[ржЕ-рж╣]/.test(message)) detectedLanguage = 'as';
      else detectedLanguage = 'en';
      
      // Mood detection with Indian context keywords
      const stressKeywords = ['stress', 'рддрдирд╛рд╡', 'ржЪрж╛ржк', 'р░Тр░др▒Нр░др░┐р░бр░┐', 'рддрдгрд╛рд╡', 'роорой роЕро┤рпБродрпНродроорпН', 'ркдрк╛ркг', 'р▓Тр▓др│Нр▓др▓б', 'р┤╕р┤ор╡Нр┤ор╡╝р┤жр╡Нр┤жр┤В', 'рмЪрм╛рмк', 'ридригри╛риЕ', 'ржЪрж╛ржк', 'pressure', 'рдкрд░реАрдХреНрд╖рд╛'];
      const anxietyKeywords = ['anxious', 'worried', 'рдЪрд┐рдВрддрд╛', 'рдЪрд┐рдВрддрд┐рдд', 'ржЙржжрзНржмрж┐ржЧрзНржи', 'р░Жр░Вр░жр▒Лр░│р░и', 'рдЪрд┐рдВрддреЗрдд', 'роХро╡ро▓рпИ', 'ркЪрк┐ркВркдрк╛', 'р▓Ър▓┐р▓Вр▓др│Ж', 'р┤Жр┤Хр╡Бр┤▓р┤д', 'рмЪрм┐рмирнНрмдрм╛', 'риЪри┐рй░ридри╛', 'ржЙржжрзНржмрзЗржЧ', '┘Б┌й╪▒'];
      const sadKeywords = ['sad', 'depressed', 'рдЙрджрд╛рд╕', 'рджреБрдЦреА', 'ржжрзБржГржЦрж┐ржд', 'р░╡р░┐р░Ър░╛р░░р░В', 'рджреБрдГрдЦреА', 'роЪрпЛроХроорпН', 'ркЙркжрк╛рк╕', 'р▓жр│Бр▓Гр▓Ц', 'р┤жр╡Бр┤Гр┤Цр┤В', 'рмжрнБрмГрмЦ', 'риЙрижри╛ри╕', 'ржжрзБржГржЦрзА', '╪з╪п╪з╪│'];
      const happyKeywords = ['happy', 'good', 'рдЦреБрд╢', 'рдЕрдЪреНрдЫрд╛', 'ржЦрзБрж╢рж┐', 'р░╕р░Вр░др▒Лр░╖р░В', 'рдЖрдирдВрджреА', 'роороХро┐ро┤рпНроЪрпНроЪро┐', 'ркЦрлБрк╢', 'р▓╕р▓Вр▓др│Лр▓╖', 'р┤╕р┤ир╡Нр┤др╡Лр┤╖р┤В', 'рмЦрнБрм╕рм┐', 'риЦрйБри╕ри╝', 'ржЖржиржирзНржжрж┐ржд', '╪о┘И╪┤'];
      const emergencyKeywords = ['suicide', 'kill myself', 'hurt myself', 'рдЖрддреНрдорд╣рддреНрдпрд╛', 'ржорзГрждрзНржпрзБ', 'р░Ър░Вр░кр▒Б', 'рдорд░рд╛рдпрдЪреЗ', 'родро▒рпНроХрпКро▓рпИ', 'ркЖркдрлНркорк╣ркдрлНркпрк╛', 'р▓Жр▓др│Нр▓ор▓╣р▓др│Нр▓пр│Ж', 'р┤Жр┤др╡Нр┤ор┤╣р┤др╡Нр┤п', 'рмЖрмдрнНрморм╣рмдрнНрнЯрм╛', 'риЦрйБрижриХрйБри╕ри╝рйА', 'ржЖрждрзНржорж╣рждрзНржпрж╛', '╪о┘И╪п┌й╪┤█М'];

      if (stressKeywords.some(keyword => lowerMessage.includes(keyword))) {
        mood = 'stressed';
      } else if (anxietyKeywords.some(keyword => lowerMessage.includes(keyword))) {
        mood = 'anxious';
      } else if (sadKeywords.some(keyword => lowerMessage.includes(keyword))) {
        mood = 'depressed';
      } else if (happyKeywords.some(keyword => lowerMessage.includes(keyword))) {
        mood = 'happy';
      } else if (emergencyKeywords.some(keyword => lowerMessage.includes(keyword))) {
        mood = 'emergency';
        emergencyAlert = true;
      }
      
      // Multilingual fallback responses
      const fallbackResponses = {
        stressed: {
          hi: "рдореИрдВ рд╕рдордЭ рд╕рдХрддрд╛ рд╣реВрдБ рдХрд┐ рдЖрдк рддрдирд╛рд╡ рдореЗрдВ рд╣реИрдВред рдпрд╣ рдмрд┐рд▓реНрдХреБрд▓ рд╕рд╛рдорд╛рдиреНрдп рд╣реИред рдЧрд╣рд░реА рд╕рд╛рдВрд╕ рд▓реЗрдВ рдФрд░ рдпрд╛рдж рд░рдЦреЗрдВ рдХрд┐ рдпрд╣ рд╕рдордп рднреА рдЧреБрдЬрд░ рдЬрд╛рдПрдЧрд╛ред рдЖрдк рдЬрд┐рддрдирд╛ рд╕реЛрдЪрддреЗ рд╣реИрдВ рдЙрд╕рд╕реЗ рдХрд╣реАрдВ рдордЬрдмреВрдд рд╣реИрдВред ЁЯТЩ рдХреНрдпрд╛ рдЖрдкрдиреЗ рдХреЛрдИ рд╡рд┐рд╢реНрд░рд╛рдо рддрдХрдиреАрдХ рдЖрдЬрдорд╛рдИ рд╣реИ?",
          en: "I can sense you're feeling stressed. That's completely understandable for students. Remember to take deep breaths and know that this feeling will pass. You're stronger than you think. ЁЯТЩ Have you tried any relaxation techniques?",
          bn: "ржЖржорж┐ ржмрзБржЭрждрзЗ ржкрж╛рж░ржЫрж┐ ржЖржкржирж┐ ржЪрж╛ржкрзЗ ржЖржЫрзЗржиред ржПржЯрж╛ ржПржХржжржо рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХред ржЧржнрзАрж░ рж╢рзНржмрж╛рж╕ ржирж┐ржи ржПржмржВ ржоржирзЗ рж░рж╛ржЦржмрзЗржи ржПржЗ ржЕржирзБржнрзВрждрж┐ ржХрзЗржЯрзЗ ржпрж╛ржмрзЗред ржЖржкржирж┐ ржпрждржЯрж╛ ржнрж╛ржмрзЗржи рждрж╛рж░ ржЪрзЗржпрж╝рзЗ ржЕржирзЗржХ рж╢ржХрзНрждрж┐рж╢рж╛рж▓рзАред ЁЯТЩ",
          te: "р░ор▒Ар░░р▒Б р░Тр░др▒Нр░др░┐р░бр░┐р░▓р▒Л р░Йр░ир▒Нр░ир░╛р░░р░ир░┐ р░ир▒Зр░ир▒Б р░Ер░░р▒Нр░ер░В р░Ър▒Зр░╕р▒Бр░Хр▒Лр░Чр░▓р▒Бр░Чр▒Бр░др▒Бр░ир▒Нр░ир░╛р░ир▒Бред р░Зр░жр░┐ р░кр▒Вр░░р▒Нр░др░┐р░Чр░╛ р░Ер░░р▒Нр░ер░ор░пр▒Нр░пр▒З р░╡р░┐р░╖р░пр░В. р░▓р▒Лр░др▒Бр░Чр░╛ р░╢р▒Нр░╡р░╛р░╕ р░др▒Ар░╕р▒Бр░Хр▒Лр░Вр░бр░┐ р░ор░░р░┐р░пр▒Б р░И р░Ер░ир▒Бр░нр░╡р░В р░Чр░бр░┐р░Ър░┐р░кр▒Лр░др▒Бр░Вр░жр░ир░┐ р░Чр▒Бр░░р▒Нр░др▒Бр░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐ред р░ор▒Ар░░р▒Б р░Ер░ир▒Бр░Хр▒Бр░ир▒Нр░ир░жр░╛р░ир░┐р░Хр░Вр░Яр▒З р░Ър░╛р░▓р░╛ р░мр░▓р░Вр░Чр░╛ р░Йр░ир▒Нр░ир░╛р░░р▒Б. ЁЯТЩ",
          default: "I can sense you're feeling stressed. Take deep breaths. You're stronger than you think. ЁЯТЩ"
        },
        anxious: {
          hi: "рдЪрд┐рдВрддрд╛ рдмрд╣реБрдд рдкрд░реЗрд╢рд╛рди рдХрд░рдиреЗ рд╡рд╛рд▓реА рд╣реЛ рд╕рдХрддреА рд╣реИ, рд▓реЗрдХрд┐рди рдЖрдк рдЗрд╕рдореЗрдВ рдЕрдХреЗрд▓реЗ рдирд╣реАрдВ рд╣реИрдВред рдЕрдкрдиреА рд╕рд╛рдВрд╕ рдкрд░ рдзреНрдпрд╛рди рджреЗрдВ - 4 рддрдХ рд╕рд╛рдВрд╕ рд▓реЗрдВ, 4 рддрдХ рд░реЛрдХреЗрдВ, 4 рддрдХ рдЫреЛрдбрд╝реЗрдВред рдЕрднреА рдЖрдк рд╕реБрд░рдХреНрд╖рд┐рдд рд╣реИрдВред ЁЯлВ рдХреНрдпрд╛ рдЖрдк рдмрддрд╛рдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ рдХрд┐ рдХрд┐рд╕ рдмрд╛рдд рдХреА рдЪрд┐рдВрддрд╛ рд╣реЛ рд░рд╣реА рд╣реИ?",
          en: "Anxiety can be overwhelming, but you're not alone in this. Try to focus on your breathing - in for 4, hold for 4, out for 4. You're safe right now. ЁЯлВ Would you like to talk about what's causing the anxiety?",
          bn: "ржЙржжрзНржмрзЗржЧ ржЦрзБржмржЗ ржХрж╖рзНржЯржХрж░ рж╣рждрзЗ ржкрж╛рж░рзЗ, ржХрж┐ржирзНрждрзБ ржЖржкржирж┐ ржПрждрзЗ ржПржХрж╛ ржиржиред ржЖржкржирж╛рж░ рж╢рзНржмрж╛рж╕рзЗрж░ ржЙржкрж░ ржоржирзЛржпрзЛржЧ ржжрж┐ржи - рзк ржкрж░рзНржпржирзНржд ржирж┐рж╢рзНржмрж╛рж╕ ржирж┐ржи, рзк ржкрж░рзНржпржирзНржд ржзрж░рзЗ рж░рж╛ржЦрзБржи, рзк ржкрж░рзНржпржирзНржд ржЫрж╛ржбрж╝рзБржиред ржПржЦржи ржЖржкржирж┐ ржирж┐рж░рж╛ржкржжред ЁЯлВ",
          default: "Anxiety can be overwhelming, but you're not alone. Focus on your breathing. You're safe right now. ЁЯлВ"
        },
        depressed: {
          hi: "рдореИрдВ рдЖрдкрдХреА рдмрд╛рдд рд╕реБрди рд░рд╣рд╛ рд╣реВрдБ, рдФрд░ рдореИрдВ рдЪрд╛рд╣рддрд╛ рд╣реВрдБ рдХрд┐ рдЖрдк рдЬрд╛рдиреЗрдВ рдХрд┐ рдЖрдкрдХреА рднрд╛рд╡рдирд╛рдПрдВ рд╕рд╣реА рд╣реИрдВред рдЕрдВрдзреЗрд░реЗ рдХреНрд╖рдгреЛрдВ рдореЗрдВ рднреА рдЙрдореНрдореАрдж рд╣реЛрддреА рд╣реИред рдЖрдкрдХрд╛ рдорд╣рддреНрд╡ рд╣реИ, рдФрд░ рдорджрдж рдорд╛рдВрдЧрдирд╛ рдЕрд╡рд┐рд╢реНрд╡рд╕рдиреАрдп рд╕рд╛рд╣рд╕ рджрд┐рдЦрд╛рддрд╛ рд╣реИред ЁЯТЩ рдХреНрдпрд╛ рдЖрдк рдХрд┐рд╕реА рднрд░реЛрд╕реЗрдордВрдж рд╡реНрдпрдХреНрддрд┐ рд╕реЗ рдмрд╛рдд рдХрд░ рдкрд╛рдП рд╣реИрдВ?",
          en: "I hear you, and I want you to know that your feelings are valid. Even in dark moments, there's hope. You matter, and reaching out shows incredible strength. ЁЯТЩ Have you been able to talk to someone you trust?",
          bn: "ржЖржорж┐ ржЖржкржирж╛рж░ ржХржерж╛ рж╢рзБржиржЫрж┐, ржПржмржВ ржЖржорж┐ ржЪрж╛ржЗ ржЖржкржирж┐ ржЬрж╛ржирзБржи ржпрзЗ ржЖржкржирж╛рж░ ржЕржирзБржнрзВрждрж┐ржЧрзБрж▓рзЛ рж╕ржарж┐ржХред ржЕржирзНржзржХрж╛рж░ ржорзБрж╣рзВрж░рзНрждрзЗржУ ржЖрж╢рж╛ ржЖржЫрзЗред ржЖржкржирж┐ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржгред ЁЯТЩ",
          default: "I hear you. Your feelings are valid. Even in dark moments, there's hope. You matter. ЁЯТЩ"
        },
        happy: {
          hi: "рдпрд╣ рд╕реБрдирдХрд░ рдмрд╣реБрдд рдЕрдЪреНрдЫрд╛ рд▓рдЧрд╛ рдХрд┐ рдЖрдк рдЕрдЪреНрдЫрд╛ рдорд╣рд╕рзВрд╕ рдХрд░ рд░рд╣реЗ рд╣реИрдВ! ЁЯШК рдпреЗ рд╕рдХрд╛рд░рд╛рддреНрдордХ рдХреНрд╖рдг рдмрд╣реБрдд рдорд╣рддреНрд╡рдкреВрд░реНрдг рд╣реИрдВред рдЖрдЬ рдЖрдкрдХреЗ рд▓рд┐рдП рдХреНрдпрд╛ рдЕрдЪреНрдЫрд╛ рд░рд╣рд╛ рд╣реИ?",
          en: "It's wonderful to hear you're feeling good! ЁЯШК Those positive moments are so important. What's been going well for you today?",
          bn: "ржЖржкржирж┐ ржнрж╛рж▓рзЛ ржЕржирзБржнржм ржХрж░ржЫрзЗржи рж╢рзБржирзЗ ржЦрзБржм ржнрж╛рж▓рзЛ рж▓рж╛ржЧрж▓! ЁЯШК ржПржЗ ржЗрждрж┐ржмрж╛ржЪржХ ржорзБрж╣рзВрж░рзНрждржЧрзБрж▓рзЛ ржЦрзБржмржЗ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржгред ржЖржЬ ржЖржкржирж╛рж░ ржЬржирзНржп ржХрзА ржнрж╛рж▓рзЛ рж╣ржпрж╝рзЗржЫрзЗ?",
          default: "It's wonderful to hear you're feeling good! ЁЯШК What's been going well for you today?"
        },
        emergency: {
          hi: "рдореБрдЭреЗ рдЖрдкрдХреА рдмрд╛рдд рд╕реЗ рдмрд╣реБрдд рдЪрд┐рдВрддрд╛ рд╣реЛ рд░рд╣реА рд╣реИред рдЖрдкрдХрд╛ рдЬреАрд╡рди рдореВрд▓реНрдпрд╡рд╛рди рдФрд░ рдЕрд░реНрдердкреВрд░реНрдг рд╣реИред рдХреГрдкрдпрд╛ рддреБрд░рдВрдд рдХрд┐рд╕реА рднрд░реЛрд╕реЗрдордВрдж рд╡реНрдпрдХреНрддрд┐ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ - рджреЛрд╕реНрдд, рдкрд░рд┐рд╡рд╛рд░, рдХрд╛рдЙрдВрд╕рд▓рд░, рдпрд╛ iCall (9152987821) рдЬреИрд╕реА рд╣реЗрд▓реНрдкрд▓рд╛рдЗрдиред рдЖрдкрдХреЛ рдЕрдХреЗрд▓реЗ рдЗрд╕рд╕реЗ рдирд╣реАрдВ рдЧреБрдЬрд░рдирд╛ рд╣реИред ЁЯЖШ",
          en: "I'm really concerned about what you're sharing. Your life has value and meaning. Please reach out to someone you trust right now - a friend, family member, counselor, or crisis helpline like iCall (9152987821) or AASRA (9820466726). You don't have to go through this alone. ЁЯЖШ",
          default: "I'm really concerned. Your life has value. Please reach out to someone you trust or call iCall (9152987821). You don't have to go through this alone. ЁЯЖШ"
        },
        normal: {
          hi: "рдореЗрд░реЗ рд╕рд╛рде рд╕рд╛рдЭрд╛ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рджред рдореИрдВ рдпрд╣рд╛рдБ рд╣реВрдБ рдЬреЛ рднреА рддрд░реАрдХреЗ рд╕реЗ рдореИрдВ рдЖрдкрдХрд╛ рд╕рд╛рде рджреЗ рд╕рдХреВрдВред рдЖрдкрдХрд╛ рджрд┐рди рдХреИрд╕рд╛ рд░рд╣рд╛? ЁЯШК",
          en: "Thank you for sharing with me. I'm here to listen and support you in whatever way I can. How has your day been going? ЁЯШК",
          bn: "ржЖржорж╛рж░ рж╕рж╛ржерзЗ рж╢рзЗржпрж╝рж╛рж░ ржХрж░рж╛рж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржжред ржЖржорж┐ ржПржЦрж╛ржирзЗ ржЖржЫрж┐ ржпрзЗржнрж╛ржмрзЗржЗ ржЖржкржирж╛ржХрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐ред ржЖржкржирж╛рж░ ржжрж┐ржи ржХрзЗржоржи ржХрж╛ржЯржЫрзЗ? ЁЯШК",
          default: "Thank you for sharing with me. I'm here to support you. How has your day been? ЁЯШК"
        }
      };
      
      const responseText = fallbackResponses[mood]?.[detectedLanguage] || 
                          fallbackResponses[mood]?.['default'] || 
                          fallbackResponses.normal[detectedLanguage] ||
                          fallbackResponses.normal.default;
      
      parsedResponse = {
        response: responseText,
        mood: mood,
        emergency: emergencyAlert,
        language: detectedLanguage
      };
    }

    // Ensure all required fields are present
    parsedResponse.response = parsedResponse.response || "рдореИрдВ рдпрд╣рд╛рдБ рдЖрдкрдХрд╛ рд╕рд╛рде рджреЗрдиреЗ рдХреЗ рд▓рд┐рдП рд╣реВрдБред ЁЯТЩ / I'm here to support you. ЁЯТЩ";
    parsedResponse.mood = parsedResponse.mood || 'normal';
    parsedResponse.emergency = parsedResponse.emergency || false;
    parsedResponse.language = parsedResponse.language || 'hi';

    console.log('Final response:', parsedResponse);
    res.json(parsedResponse);

  } catch (error) {
    console.error('Chat error:', error);
    res.status(500).json({ 
      response: 'рдореБрдЭреЗ рдЦреЗрдж рд╣реИ, рд▓реЗрдХрд┐рди рдореБрдЭреЗ рдЕрднреА рдкрд░реЗрд╢рд╛рдиреА рд╣реЛ рд░рд╣реА рд╣реИред рддрддреНрдХрд╛рд▓ рд╕рд╣рд╛рдпрддрд╛ рдХреЗ рд▓рд┐рдП рдХреГрдкрдпрд╛ рдХрд┐рд╕реА рдХрд╛рдЙрдВрд╕рд▓рд░ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред ЁЯТЩ / I apologize, but I\'m having trouble right now. Please reach out to a counselor if you need immediate support. ЁЯТЩ',
      mood: 'normal',
      emergency: false,
      language: 'hi',
      error: 'Server error occurred'
    });
  }
});

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    service: 'MindCare Mental Health Chatbot - Indian Languages',
    aiConfigured: !!process.env.GEMINI_API_KEY,
    supportedLanguages: [
      'Hindi', 'English (Indian)', 'Bengali', 'Telugu', 'Marathi', 'Tamil', 
      'Gujarati', 'Kannada', 'Malayalam', 'Odia', 'Punjabi', 'Assamese', 
      'Urdu', 'Maithili', 'Santali', 'Kashmiri', 'Nepali', 'Sindhi', 
      'Dogri', 'Manipuri', 'Bodo', 'Konkani'
    ]
  });
});



// 404 Error Handler - Must be placed after all routes
app.use((req, res, next) => {
  console.log(`404 Error: ${req.method} ${req.path} - Route not found`);
  res.status(404).json({
    error: 'Route not found',
    message: 'The requested resource does not exist on this server.',
    path: req.path,
    method: req.method,
    timestamp: new Date().toISOString(),
    availableRoutes: [
      'GET /',
      'GET /health',
      'POST /api/chat'
    ]
  });
});

// Global Error Handler
app.use((err, req, res, next) => {
  console.error('Global Error Handler:', err);
  res.status(500).json({
    error: 'Internal Server Error',
    message: 'Something went wrong on our end. Please try again later.',
    timestamp: new Date().toISOString()
  });
});

// Start server
app.listen(port, () => {
  console.log(`тЬЕ MindCare API server running at http://localhost:${port}`);
  console.log(`ЁЯУЛ Available routes:`);
  console.log(`   GET  /health    - Health check endpoint`);
  console.log(`   POST /api/chat  - Chat API endpoint`);
  console.log(`ЁЯУЭ Note: Chat interface is served by main website's AIChat.tsx component`);
});
